In this file paste whatever you need to temp hold

/*if(argv[1] == (string)"-hashmap"){

        dataTypeHash = true;

        cout << "The r/place data set is being loaded into memory as a hashmap..." << endl;

        for(auto it = rawPixelData.begin(); it != rawPixelData.end(); it++){
            cord_map.insert(*it);
            userid_map.insert(*it);
            color_map.insert(*it);
        }

        cout << "The r/place data set has been successfully loaded as a hashmap!" << endl;

    } else if(argv[1] == (string)"-bplustree"){

        cout << "The r/place data set is being loaded into memory as a B+ Tree... (this might take a while)" << endl;
        for(auto it = rawPixelData.begin(); it != rawPixelData.end(); it++){
            userid_tree.insertID(*it);
            color_tree.insertColor(*it);
            coordinate_tree.insertCoordinates(*it);
        }

        cout << "The r/place data set has been successfully loaded as a B+ Tree!" << endl;
    }*/

cout << "1. Get first pixel edit (coordinates and color)" << endl;
                cout << "2. Get last pixel edit (coordinates and color)" << endl;
                cout << "3. Get number of pixels edited" << endl;
                cout << "4. Print all edits made by this user" << endl;
                cout << "5. Go back" << endl;

                cin >> userChoice;
                if (userChoice == 1) {
                    cout << "Please enter the userID" << endl;
                    cin >> searchUserID;

                    if (dataTypeHash) {
                        returnedPixelUpdate = userid_map.getUserFirst(searchUserID);
                    } else {
                        returnedPixelUpdate = nullptr; //PLACEHOLDER
                    }

                    if (returnedPixelUpdate == nullptr)
                        cout << "No results found" << endl;
                    else
                        returnedPixelUpdate->printPixelUpdate();
                }
                else if(userChoice == 2){
                    cout << "Please enter the userID" << endl;
                    cin >> searchUserID;

                    if(dataTypeHash){
                        returnedPixelUpdate = userid_map.getUserLast(searchUserID);
                    }
                    else{
                        returnedPixelUpdate = nullptr; //PLACEHOLDER
                    }

                    if(returnedPixelUpdate == nullptr)
                        cout << "No results found" << endl;
                    else
                        returnedPixelUpdate->printPixelUpdate();
                }

                else if(userChoice == 3){}

                else if(userChoice == 4) {
                    cout << "Please enter the userID" << endl;
                    cin >> searchUserID;

                    if (dataTypeHash) {
                        returnedPixelUpdateList = userid_map.getUserAll(searchUserID);
                    } else {
                        returnedPixelUpdate = nullptr; //PLACEHOLDER
                    }

                    if (returnedPixelUpdate == nullptr)
                        cout << "No results found" << endl;
                    else {

                        for (auto iter: *returnedPixelUpdateList)
                            iter.printPixelUpdate();
                    }
                }



cout << "Hewwo, World!" << endl;

    //pixelUpdateLoader();
    bplusTree node;
    /*node.insert(new pixelUpdate("ovTZk4GyTS1mDQnTbV+vDOCu1f+u6w+CkIZ6445vD4XN8alFy/6GtNkYp5MSic6Tjo/fBCCGe6oZKMAN3rEZHw=="));
    node.insert(new pixelUpdate("6NSgFa1CvIPly1VniNhlbrmoN3vgDFbMSKqh+c4TTfrr3dMib91oUWONX96g5PPcioIxedF24ldNOu/g5yqDrg=="));
    node.insert(new pixelUpdate("O5Oityp3Z3owzTuwM9XnMggpLcqKEumsOMKGhRiDTTImWbNLhLKmLI4gn1QPbaABqZqmFC/OmE/O732n39dGIQ=="));
    node.insert(new pixelUpdate("tc273UiqS0wKa6VwiOs/iz/t4LyPYrhL2Q347awn11IQQELrEzZBCmGe28NWM+O1IdfH4CieCpEnE5sHecW9Ow=="));
    node.insert(new pixelUpdate("OOWsU/HLb4UUkQwclDeXFtsJTOXMlAdNHiRpFA1Qk+SxUrJE7lpGFevfV9w+zImFimmNANlDdfN3kluz69M9MQ=="));*/
    /*node.insert(new pixelUpdate("5"));
    node.insert(new pixelUpdate("15"));
    node.insert(new pixelUpdate("25"));
    node.insert(new pixelUpdate("35"));
    node.insert(new pixelUpdate("45"));
    node.insert(new pixelUpdate("55"));
    node.insert(new pixelUpdate("40"));
    node.insert(new pixelUpdate("30"));
    node.insert(new pixelUpdate("20"));
    node.insert(new pixelUpdate("31"));
    node.insert(new pixelUpdate("56"));
    node.insert(new pixelUpdate("54"));
    node.insert(new pixelUpdate("32"));
    node.insert(new pixelUpdate("10"));*/
    ifstream csv("./CSVData/example.csv");
    string line;
    //Throws out the titles from the original csv.
    getline(csv, line);
    while(getline(csv, line)) {
        vector<string> pixelDataRAW = stringToVector(line, ',');
        node.insert(new pixelUpdate(pixelDataRAW.at(1)));
    }


    node.printbplusTree(node.getRoot());
    node.search("OOWsU/HLb4UUkQwclDeXFtsJTOXMlAdNHiRpFA1Qk+SxUrJE7lpGFevfV9w+zImFimmNANlDdfN3kluz69M9MQ==");
    //node.search("15");